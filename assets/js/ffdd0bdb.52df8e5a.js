"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[283],{3595:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"code/style/style","title":"Code Style","description":"A consistent code style helps to improve the approachability of code and reduce noise during pull requests caused by","source":"@site/docs/code/style/style.md","sourceDirName":"code/style","slug":"/code/style/","permalink":"/wotr-docs/docs/code/style/","draft":false,"unlisted":false,"editUrl":"https://github.com/Wanderers-Of-The-Rift/wotr-docs/edit/main/website/docs/code/style/style.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Modifiers","permalink":"/wotr-docs/docs/code/design/modifiers"},"next":{"title":"standards","permalink":"/wotr-docs/docs/builds/standards"}}');var o=n(4848),l=n(8453);const c={},r="Code Style",a={},i=[{value:"Tools",id:"tools",level:2},{value:"Spotless",id:"spotless",level:3},{value:"Checkstyle",id:"checkstyle",level:3}];function d(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.header,{children:(0,o.jsx)(s.h1,{id:"code-style",children:"Code Style"})}),"\n",(0,o.jsx)(s.p,{children:"A consistent code style helps to improve the approachability of code and reduce noise during pull requests caused by\nconflicting IDE settings between developers."}),"\n",(0,o.jsx)(s.h2,{id:"tools",children:"Tools"}),"\n",(0,o.jsx)(s.p,{children:"The project a few tools to detect and address style violations. These tools are run against all Pull Requests."}),"\n",(0,o.jsx)(s.h3,{id:"spotless",children:"Spotless"}),"\n",(0,o.jsx)(s.p,{children:"Spotless is a tool that both detects and corrects style issues. This includes:"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:"Indentation using spaces, not tabs"}),"\n",(0,o.jsx)(s.li,{children:"The order imports appear in"}),"\n",(0,o.jsx)(s.li,{children:"Removal of unused imports"}),"\n",(0,o.jsx)(s.li,{children:"Overall formatting of code"}),"\n",(0,o.jsx)(s.li,{children:"Some safe code changes such as removal of unnecessary boxing."}),"\n"]}),"\n",(0,o.jsxs)(s.p,{children:["To check for issues run the ",(0,o.jsx)(s.code,{children:"spotlessCheck"})," gradle task - this will produce a report of all violations.\nThen to fix issues run ",(0,o.jsx)(s.code,{children:"spotlessApply"}),"."]}),"\n",(0,o.jsxs)(s.p,{children:["If there are portions of code for which spotless checks should not be applied - perhaps a section of code that\nshould be formatted in a particular way for readability - then it can be surrounded by a pair of comments containing\n",(0,o.jsx)(s.code,{children:"spotless:off"})," and ",(0,o.jsx)(s.code,{children:"spotless:on"}),":"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-java",children:"// spotless:off\npublic static final List<Vector2i> POSITIONS = List.of(\n        new Vector2i(0, 1),\n        new Vector2i(2, 3),\n        new Vector2i(5, 8),\n        new Vector2i(9, 13)\n);\n// spotless:on\n"})}),"\n",(0,o.jsx)(s.h3,{id:"checkstyle",children:"Checkstyle"}),"\n",(0,o.jsxs)(s.p,{children:["Checkstyle is a tool that can only detect and report style issues. It can be run using the ",(0,o.jsx)(s.code,{children:"checkstyleMain"})," gradle task. It has been configured to report:"]}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:"Wildcard or star imports"}),"\n",(0,o.jsx)(s.li,{children:"Names that don't match the standard java style. e.g. packages should have all lowercase names, non-constant variables should start with a lowercase letter, method names should start with a lowercase letter"}),"\n",(0,o.jsx)(s.li,{children:"If statements that don't use braces"}),"\n",(0,o.jsxs)(s.li,{children:["Declaration order - this checks that elements in a type are declared in the following order:","\n",(0,o.jsxs)(s.ol,{children:["\n",(0,o.jsx)(s.li,{children:"Static variables (public, then protected, then package, then private)"}),"\n",(0,o.jsx)(s.li,{children:"Instance variables (public, then protected, then package, then private)"}),"\n",(0,o.jsx)(s.li,{children:"Constructors"}),"\n",(0,o.jsx)(s.li,{children:"Methods"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(s.li,{children:"Case statements with code that falls through to another case statement. e.g."}),"\n"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-java",children:"switch (letter) {\n    // This is fine, the case for 'a' has no code\n    case 'a':\n    case 'b':\n        System.out.println(\"a or b\");\n        break;\n    // This provokes a checkstyle error\n    case 'c':\n        System.out.println(\"only c\");\n    case 'd':\n        System.out.println(\"only d\");\n}\n"})}),"\n",(0,o.jsx)(s.p,{children:"This can be disabled by adding a comment of 'fall through' on the line before the case statement that can be fallen into."}),"\n",(0,o.jsxs)(s.p,{children:["Similar to spotless, checkstyle checks can be disabled using ",(0,o.jsx)(s.code,{children:"CHECKSTYLE.OFF: <Check>"})," and ",(0,o.jsx)(s.code,{children:"CHECKSTYLE.ON: <Check>"})," comment pairs. e.g."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-java",children:"public void check() {\n    // CHECKSTYLE.OFF: NeedBraces - You cannot tell me what to do\n    if (false) return;\n    // CHECKSTYLE.ON: NeedBraces\n}\n"})}),"\n",(0,o.jsxs)(s.p,{children:["However checkstyle additionally supports using the ",(0,o.jsx)(s.code,{children:"@SuppressWarnings"})," annotation"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-java",children:'@SuppressWarnings({ "checkstyle:NeedBraces", "checkstyle:MethodName", "checkstyle:DeclarationOrder" })\npublic class MyClass {\n    public void BAD_METHOD_NAME() {\n        if (true) return;\n    }\n    \n    public int value;\n}\n'})})]})}function h(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>r});var t=n(6540);const o={},l=t.createContext(o);function c(e){const s=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),t.createElement(l.Provider,{value:s},e.children)}}}]);