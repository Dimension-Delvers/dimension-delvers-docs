"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4583],{188:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>a,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"builds/tutorial","title":"Build Tutorial","description":"(Work In Progress, also some things are not yet implemented)","source":"@site/docs/builds/tutorial.md","sourceDirName":"builds","slug":"/builds/tutorial","permalink":"/wotr-docs/docs/builds/tutorial","draft":false,"unlisted":false,"editUrl":"https://github.com/Wanderers-Of-The-Rift/wotr-docs/edit/main/website/docs/builds/tutorial.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"processors","permalink":"/wotr-docs/docs/builds/processors"},"next":{"title":"Tools","permalink":"/wotr-docs/docs/resources/tools/"}}');var n=t(4848),r=t(8453);const i={},l="Build Tutorial",a={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Chapter 1: Setting up",id:"chapter-1-setting-up",level:2},{value:"Chapter 2: Introduction to building",id:"chapter-2-introduction-to-building",level:2},{value:"Rooms and POIs",id:"rooms-and-pois",level:3},{value:"Structure blocks and Jigsaw blocks",id:"structure-blocks-and-jigsaw-blocks",level:3},{value:"Processor blocks",id:"processor-blocks",level:3},{value:"Guides in game",id:"guides-in-game",level:3},{value:"Chapter 3: Building and rules",id:"chapter-3-building-and-rules",level:2},{value:"Spawning template",id:"spawning-template",level:3},{value:"Using fixed processor blocks",id:"using-fixed-processor-blocks",level:3},{value:"Using custom processor blocks",id:"using-custom-processor-blocks",level:3},{value:"Lighting",id:"lighting",level:3},{value:"POIs in Rooms",id:"pois-in-rooms",level:3},{value:"Server Build Indicators",id:"server-build-indicators",level:3},{value:"Saving",id:"saving",level:3},{value:"Chapter 4: Making processors",id:"chapter-4-making-processors",level:2},{value:"Custom processors",id:"custom-processors",level:3},{value:"Making a theme",id:"making-a-theme",level:3},{value:"Excel way",id:"excel-way",level:4},{value:"WorldEdit way",id:"worldedit-way",level:4},{value:"POI",id:"poi",level:5},{value:"Room",id:"room",level:5},{value:"Into the Mod",id:"into-the-mod",level:3},{value:"Chapter 5: Questions? Ask for help!",id:"chapter-5-questions-ask-for-help",level:2},{value:"Appendix A",id:"appendix-a",level:2}];function h(e){const s={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"build-tutorial",children:"Build Tutorial"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.em,{children:"(Work In Progress, also some things are not yet implemented)"})}),"\n",(0,n.jsx)(s.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"#chapter-1-setting-up",children:"Chapter 1: Setting up"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"#chapter-2-introduction-to-building",children:"Chapter 2: Introduction to building"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"#chapter-3-building-and-rules",children:"Chapter 3: Building and rules"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"#chapter-4-making-processors",children:"Chapter 4: Making processors"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"#chapter-5-questions-ask-for-help",children:"Chapter 5: Questions? Ask for help!"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"#appendix-a",children:"Appendix A"})}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"chapter-1-setting-up",children:"Chapter 1: Setting up"}),"\n",(0,n.jsxs)(s.p,{children:["To get started with building for WotR, first you need to download ",(0,n.jsx)(s.a,{href:"https://prismlauncher.org/download/windows/",children:"Prims modloader"}),", and the builders ",(0,n.jsx)(s.a,{href:"https://discord.com/channels/1374772629298483202/1382748526915747870/1385345216709525587",children:"modpack"}),'.\nAfter setting up Prism, click on "Add Instance", "Import", "Browse" and locate the Builders Modpack you\'ve just downloaded.']}),"\n",(0,n.jsxs)(s.p,{children:["Another great tool to download is the ",(0,n.jsx)(s.a,{href:"https://discord.com/channels/1374772629298483202/1382748526915747870/1383070611403702284",children:"resource pack"}),', which is used to indicate the status of your builds. Launch the Builders Mod, go to "Options", "Resource Packs", "Open Pack Folder" and place the resource pack .zip in here.\nMake sure you enable it by pressing the arrow on the icon.']}),"\n",(0,n.jsxs)(s.p,{children:["Before you can get on the Builders Server, file a ",(0,n.jsx)(s.a,{href:"https://discord.com/channels/1374772629298483202/1382748526915747870/1385202486620454943",children:"ticket"})," to get access, but offline building is also possible.\nThe last thing you need to do, is putting your Discord name and timezone in the ",(0,n.jsx)(s.a,{href:"https://discord.com/channels/1374772629298483202/1382748526915747870/1383009059590115398",children:"Builders Sheet in this post"}),", and pick an unused signature. This sheet will be used throughout the tutorial."]}),"\n",(0,n.jsx)(s.h2,{id:"chapter-2-introduction-to-building",children:"Chapter 2: Introduction to building"}),"\n",(0,n.jsx)(s.p,{children:"Before we can get started with building, we first need to cover the basics. It is also advised to follow a tutorial on the basics of both WorldEdit and Structure Blocks, but not required."}),"\n",(0,n.jsx)(s.h3,{id:"rooms-and-pois",children:"Rooms and POIs"}),"\n",(0,n.jsxs)(s.p,{children:["Rooms are the main structures the game is played in. This is what you travel through in a rift.",(0,n.jsx)(s.br,{}),"\n","POIs are the small structures inside rooms that contain loot and enemies.",(0,n.jsx)(s.br,{}),"\n","Those two are the main structures of the game, and will be randomly generated every time you open a rift.\nThere are several sizes for both of them. For POIs, which have a footprint of a square, we indicate that by the horizontal length.\nThe lenghts used are: 3,5,7,9, and 11.\nFor Rooms we do not use the length of a block to indicate size, but a multiple of 15 (and a bit), the details can be found in the Docs.\nA (3x3x3) Room is 47 blocks long in X, Y and Z direction, respectively."]}),"\n",(0,n.jsx)(s.p,{children:"There are different varieties for both of them, lets start with Rooms:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Stable Rooms: Always 3x3x3, and well-reachable doors. You don't need to build or break, nor travel long distances, to reach all exits.\nThese rooms are the first encountered when opening a Rift."}),"\n",(0,n.jsx)(s.li,{children:"Unstable Rooms: 3xYx3 Rooms, they have varying height. The doors are not always well-reachable, and they are found around Stable rooms."}),"\n",(0,n.jsx)(s.li,{children:"Chaos Rooms: Varying sizes, between 1 and 3. Those rooms do not have doors in the center of the faces, but on multiple fixed possible places.\nThey are placed on the outside of the Rift."}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"There are also varieties of POIs:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Free: Free standing POIs can be placed all over the floor."}),"\n",(0,n.jsx)(s.li,{children:"In-Wall: POIs that fully carve into the wall, like a cave."}),"\n",(0,n.jsx)(s.li,{children:"Halfway: POIs that are half insid- and half outside (rounded up) the wall."}),"\n",(0,n.jsx)(s.li,{children:"Ceiling: Those POIs are placed on the ceiling of the rooms, like a chandelier."}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"structure-blocks-and-jigsaw-blocks",children:"Structure blocks and Jigsaw blocks"}),"\n",(0,n.jsx)(s.p,{children:"The created structures are saved using structure blocks. If you use the templates, those are provided. Do not forget to use them to save, however.\nJigsaw blocks are the blocks that make generation of Rooms and POIs possible. They are pre-configured too."}),"\n",(0,n.jsx)(s.h3,{id:"processor-blocks",children:"Processor blocks"}),"\n",(0,n.jsx)(s.p,{children:"Processor blocks are the blocks we (mostly) use to create rooms and POIs. They will be themed with a processor every time they are generated in game. For example,\na processor block in a cave theme will turn into stone, but the same block in a forest theme will turn into wood. An example is shown below."}),"\n",(0,n.jsx)("img",{src:"example_hall.png",alt:"example_hall",width:"50%"}),"\n",(0,n.jsx)(s.h3,{id:"guides-in-game",children:"Guides in game"}),"\n",(0,n.jsxs)(s.p,{children:["At the spawn location of the build server, a few guides are placed that give examples of the things above, and empty templates\nare provided. On singleplayer, you can use the command: ",(0,n.jsx)(s.code,{children:"/spawnpiece wotr:guides/[guide]"})," to spawn in the guideline pieces. There is an example hallway, showing what the processor blocks do. There are also several palettes for processor blocks. You can copy-paste by control-middleclick on the structure block, so you can have one near your building area. There is also a jigsaw palette, and example placements included."]}),"\n",(0,n.jsx)(s.h2,{id:"chapter-3-building-and-rules",children:"Chapter 3: Building and rules"}),"\n",(0,n.jsx)(s.p,{children:"To get consistent and quality rooms, there are a few rules we agreed upon:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["Naming: The created room has to be saved using the following structure:\n",(0,n.jsx)(s.code,{children:"wotr:rift/room/stability/XYZ/main_feature-#-signature"}),".\nWhere Stability is Stable, Unstable or Chaos, XYZ is the size in every direction (1, 2 or 3), and mainfeature is the main feature of the room, chosen by the builder, # is the variation number, signature is the builders signature.\nExample: wotr",":rift","/room/stable/333/testRoom_1_builderName.",(0,n.jsx)(s.br,{}),"\n","The created POI has to be saved as the following: ",(0,n.jsx)(s.code,{children:"wotr:rift/poi/type/size/main_feature-#-signature"}),".",(0,n.jsx)(s.br,{}),"\n","Here, type is free, inwall, halfway or ceiling. Size is one of 3, 5, 7, 9 or 11."]}),"\n",(0,n.jsx)(s.li,{children:"Room surfaces: The surfaces of the Rooms need to be at least 3 blocks thick. This is to prevent a casual player to accidentally\ndig into bedrock. This is not a hard rule, but around 90% of the surfaces need to have this thickness. The exception for this are (1xYx1) Chaos rooms, as they are too small otherwise, and may use 2 blocks thick surfaces."}),"\n",(0,n.jsx)(s.li,{children:"POI chests and spawner: Every POI needs at least an amount of chests equal to its length, and 1 trial spawner."}),"\n",(0,n.jsx)(s.li,{children:"When making a Chaos room, at least 1/3 of the doors must remain open. To close other doors, remove the jigsaw blocks. Do not\nfill the doorway with bedrock, this will be generated automatically."}),"\n",(0,n.jsx)(s.li,{children:"POIs should not have water on the edge of the structure, not even at the ground level layer. This is to prevent leakage when the floor the POI gets placed on is uneven."}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"spawning-template",children:"Spawning template"}),"\n",(0,n.jsx)(s.p,{children:"On the build server, a template for every structure is provided, and placed in an appropriate location. To make locating this easy, Stable room templates are light gray, Unstable room templates\nare pink, and Chaos room templates are red. If there are no empty templates for the structure you want to build, please contact a build coordinator."}),"\n",(0,n.jsxs)(s.p,{children:["In a singleplayer world, you can use the command ",(0,n.jsx)(s.code,{children:"/spawnpiece wotr:templates/[structure]"})," to spawn in the template of the structure you want to build. Be careful, they might be bigger than expected, and there is no undo command."]}),"\n",(0,n.jsx)(s.h3,{id:"using-fixed-processor-blocks",children:"Using fixed processor blocks"}),"\n",(0,n.jsx)(s.p,{children:"There are fixed and custom processor blocks. Fixed processor blocks are always used for the same purpose, a wall processor block should always be used for walls.\nNumbers 1-8 are fixed, see table below for their use. Use these when making builds, both rooms and POIs, so the processors can easily target them.\nA theme will always make sure that those blocks will be turned into thematic blocks."}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Color"}),(0,n.jsx)(s.th,{children:"ID"}),(0,n.jsx)(s.th,{children:"Name"}),(0,n.jsx)(s.th,{children:"Use"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Grey"}),(0,n.jsx)(s.td,{children:"1"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"processor_block_1"})}),(0,n.jsx)(s.td,{children:"Walls"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Orange"}),(0,n.jsx)(s.td,{children:"2"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"processor_block_2"})}),(0,n.jsx)(s.td,{children:"Paths"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Green"}),(0,n.jsx)(s.td,{children:"3"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"processor_block_3"})}),(0,n.jsx)(s.td,{children:"Floors"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Purple"}),(0,n.jsx)(s.td,{children:"4"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"processor_block_4"})}),(0,n.jsx)(s.td,{children:"Alt Wall"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Blue"}),(0,n.jsx)(s.td,{children:"5"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"processor_block_5"})}),(0,n.jsx)(s.td,{children:"Dark Floor"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Yellow"}),(0,n.jsx)(s.td,{children:"6"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"processor_block_6"})}),(0,n.jsx)(s.td,{children:"Planks"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Black"}),(0,n.jsx)(s.td,{children:"7"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"processor_block_7"})}),(0,n.jsx)(s.td,{children:"Bricks"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"L_Blue"}),(0,n.jsx)(s.td,{children:"8"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"processor_block_8"})}),(0,n.jsx)(s.td,{children:"Alt Path"})]})]})]}),"\n",(0,n.jsx)(s.p,{children:"Where walls, paths and floors comprise the bulk of the room."}),"\n",(0,n.jsx)(s.p,{children:"Alt wall can be used for etching, and indicators like cracks. Dark floor can be used in corners, further away from the path. Planks will (almost) always be planks, for things like bridges. Bricks can be used to indicate a more solid part.\nThe alt path can be used to surround the path, to make it blend in a bit more.\nWater can be used as the themed liquid. If you want themed leaves, use 'processor_block_6_glass', which will often be turned into leaves. If you always want leaves, use a custom processor block family. Glass panes can also be turned into iron bars, because Mojang sees them as being similar."}),"\n",(0,n.jsxs)(s.p,{children:["The specific blocks have a suffix like: ",(0,n.jsx)(s.code,{children:"processor_block_1_slab"}),".\nEvery family of processor blocks contains:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Full block"}),"\n",(0,n.jsx)(s.li,{children:"Pillar"}),"\n",(0,n.jsx)(s.li,{children:"Slab"}),"\n",(0,n.jsx)(s.li,{children:"Stairs"}),"\n",(0,n.jsx)(s.li,{children:"Wall"}),"\n",(0,n.jsx)(s.li,{children:"Button"}),"\n",(0,n.jsx)(s.li,{children:"Pressure plate"}),"\n",(0,n.jsx)(s.li,{children:"Fence"}),"\n",(0,n.jsx)(s.li,{children:"Fence gate"}),"\n",(0,n.jsx)(s.li,{children:"Glass"}),"\n",(0,n.jsx)(s.li,{children:"Glass pane"}),"\n",(0,n.jsx)(s.li,{children:"Trapdoor"}),"\n"]}),"\n",(0,n.jsx)("img",{src:"processor_family.png",alt:"processor_family",width:"50%"}),"\n",(0,n.jsx)(s.h3,{id:"using-custom-processor-blocks",children:"Using custom processor blocks"}),"\n",(0,n.jsx)(s.p,{children:"You can also use custom processor blocks, if you want a block that does not fit in any of the fixed categories, or if you want a block\nto always be from the same set.\nExamples are: glass or wood. A glass block does not belong to Wall or Floor, but having the color randomly be generated is nice, so you can use a custom processor block for this.\nWhen you are creating a tree, you always want this to be made out of wood, regardless of theme, so use a custom processor block for this too.\nThe reason those are not fixed processor blocks, is that only a small amount of structures will use them, and now the processor block number can be used for other things, with other structures."}),"\n",(0,n.jsxs)(s.p,{children:["If you use custom processor blocks, you must provide the processor yourself. This will be explained in a later Chapter.",(0,n.jsx)(s.br,{}),"\n","The full set of processor blocks is shown below, where the first 8 are fixed families, and the last 7 are custom."]}),"\n",(0,n.jsx)("img",{src:"palette_full.png",alt:"palette_full",width:"50%"}),"\n",(0,n.jsx)(s.h3,{id:"lighting",children:"Lighting"}),"\n",(0,n.jsx)(s.p,{children:"A low level nightvision is given to players when entering the rift, so adding light in rooms is not required. Natural lighting (torches, lanterns) may be added, as well as the creative lights (operator utilities tab), to highlight certain locations."}),"\n",(0,n.jsx)(s.h3,{id:"pois-in-rooms",children:"POIs in Rooms"}),"\n",(0,n.jsxs)(s.p,{children:["When building a room, you need to include POIs. This can be done by adding Jigsaw Blocks. A POI will be generated against the Jigsaw, so it must be placed a bit further. This means that for a free standing poi, the Jigsaw must be placed 2 blocks deep in the floor. The same applies to halfway POIs, but for those you must also have the small line on the Jigsaw block towards you, and away from the wall. It should also be placed against the wall. The ceiling Jigsaw must be placed 2 layers in the ceiling. For the in-wall Jigsaw, however, placement is different. Those must be placed against the wall, with the face towards the wall. This is because when it generates, it generates towards the wall, and thus be placed inside. A placement example is on the server, or can be loaded with ",(0,n.jsx)(s.code,{children:"wotr:guides/jigsaw_placement"}),"."]}),"\n",(0,n.jsx)("img",{src:"Jigsaw_example.png",alt:"jigsaw_example",width:"50%"}),"\n",(0,n.jsxs)(s.p,{children:["Load ",(0,n.jsx)(s.code,{children:"wotr:guides/jigsaw_palette"})," to get the correct settings for all Jigsaw blocks. You can control middle-click the one you want, and place it on the correct location. They are named, so they are distinguishable in your inventory. Keep in mind how far the POI you place will reach in every dimension, they will destroy blocks when necessary! In-wall POIs do carve deep, and free standing go up high."]}),"\n",(0,n.jsx)("img",{src:"jigsaw_palette.png",alt:"jigsaw_palette",width:"50%"}),"\n",(0,n.jsx)(s.h3,{id:"server-build-indicators",children:"Server Build Indicators"}),"\n",(0,n.jsx)(s.p,{children:"On the server, wool blocks are used to indicate the status of your Room, and the sizes of the POIs. If you've installed the resource pack, they have replaced the wool textures. POI size indicators have a number on them. The status blocks indicate:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Red: Still building."}),"\n",(0,n.jsx)(s.li,{children:"Yellow: Would like feedback for finishing touches."}),"\n",(0,n.jsx)(s.li,{children:"Lime: Finished, ready for review."}),"\n",(0,n.jsx)(s.li,{children:"Blue: Want help with placing POIs."}),"\n",(0,n.jsx)(s.li,{children:"Cyan: The POIs are placed by builder."}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"To set your structure as finished, you have to add the name on the Builders sheet. Only then it can be put in the mod."}),"\n",(0,n.jsx)("img",{src:"status_blocks.png",alt:"status_blocks",width:"50%"}),"\n",(0,n.jsx)(s.h3,{id:"saving",children:"Saving"}),"\n",(0,n.jsx)(s.p,{children:'To save your created structure, locate the structure block for saving. For rooms, they are the inner structure block. For\nPOIs, they are the top structure block. Make sure you use the correct naming convention, as written in rules. To save, press the right "SAVE" button.'}),"\n",(0,n.jsx)("img",{src:"save_room.png",alt:"save_room",width:"50%"}),"\n",(0,n.jsx)("img",{src:"save_poi.png",alt:"save_poi",width:"50%"}),"\n",(0,n.jsx)(s.p,{children:"To allow the mod to use your structure, copy-paste the structure name into the Builders Sheet in the correct location (Room and POI\ntabs). Ask in chat for a review."}),"\n",(0,n.jsx)(s.h2,{id:"chapter-4-making-processors",children:"Chapter 4: Making processors"}),"\n",(0,n.jsxs)(s.p,{children:["To start with processor generation using excel sheets, download the following zip file:\n",(0,n.jsx)(s.code,{children:"json_generator.zip"})," from here ",(0,n.jsx)(s.em,{children:"Link broken, WIP"}),".\nIt uses ",(0,n.jsx)(s.a,{href:"https://www.python.org/downloads/",children:"Python 3"}),'.\nIt is also useful to open Jade plugin setting in-game (num 0 by default), scroll down to the very bottom and enable both "Registry Name" and "Block States".\nThis makes you able to see the names of the blocks you want to use, and their properties.',(0,n.jsx)(s.br,{}),"\n","In the sheets, only the ",(0,n.jsx)(s.strong,{children:"yellow"})," cells should be filled in, but not all yellow cells need to be completed."]}),"\n",(0,n.jsxs)(s.p,{children:['For most processors, a value called "step size" is used, which is like a weight for the given block, dictating how often it gets used. It is not equal to percentage,\nas it scales exponentially down. A step size of 25 for block A and 75 for block B will give a 50/50 distribution when generated. The random noise used is simplex,\nit will generate smooth, organic-looking patterns with continuous gradients, like layered spheres. A good way to grasp the step size values is to see it as an onion, with the first\ninput being the outer layer, and every following input being one layer towards the center. When peeling the onion, the outer layer will be bigger than the inner layer, even tho they are both 1 layer, and the same holds for\nstep size, even when given the same value. The sum of the steps need to equal 1, anything higher will not get\nused, and lower means some of the processor blocks will not get transformed. The processor input ',(0,n.jsx)(s.code,{children:"noise_scale_"}),", followed by ",(0,n.jsx)(s.code,{children:"x, y, z"}),",\ncontrols the size of the total onion, and its layers. Smaller values give larger onions."]}),"\n",(0,n.jsx)(s.h3,{id:"custom-processors",children:"Custom processors"}),"\n",(0,n.jsxs)(s.p,{children:["To create a custom processor for 1 processor block, use ",(0,n.jsx)(s.code,{children:"processor_single_sheet.xlsx"}),". If you want to use a custom processor for multiple processor blocks, use\n",(0,n.jsx)(s.code,{children:"processor_multiple_sheet.xlsx"})," instead. You only need to fill in the yellow cells of the blocks you've used, but make sure it is for the right number processor block.\nState is the block the processor block turns into, for example ",(0,n.jsx)(s.code,{children:"minecraft:stone"}),", and step size is as explained above.\nChecksum will turn green if the total is 1, as indicator."]}),"\n",(0,n.jsxs)(s.p,{children:["A processor will generate a number between 0 and 1, and will look what block it wants to replace.\nThen, it will stack the steps from left to right, adding the numbers, and look for the block that belongs to this number.\nLet's say it wants to replace ",(0,n.jsx)(s.code,{children:"processor_block_10"}),", and generates number ",(0,n.jsx)(s.code,{children:"0.7"}),". Now if, for example, in the spreadsheet you\nhave ",(0,n.jsx)(s.code,{children:"minecraft:stone   0.6"})," and ",(0,n.jsx)(s.code,{children:"minecraft:dirt   0.4"}),", it will replace ",(0,n.jsx)(s.code,{children:"processor_block_10"})," into ",(0,n.jsx)(s.code,{children:"minecraft_dirt"}),". If, instead,\nthe number generated was ",(0,n.jsx)(s.code,{children:"0.3"}),", the block turns into ",(0,n.jsx)(s.code,{children:"minecraft_stone"}),". So, every block is like another layer in an onion, with the step sizes\nbeing the thickness of the layer, and the left-most step being the outer layer."]}),"\n",(0,n.jsxs)(s.p,{children:["When you're done filling in the rows of the blocks you have used, save the sheet as:\n",(0,n.jsx)(s.code,{children:"processor_single_sheet.csv"})," or ",(0,n.jsx)(s.code,{children:"processor_multiple_sheet.csv"}),", respectively. Place this file in the same folder as the belonging python script\n(",(0,n.jsx)(s.code,{children:"single_json_generator.py"})," or ",(0,n.jsx)(s.code,{children:"multiple_json_generator.py"}),"). Run this, and enter the type of structure you want this processor for, either Room or POI.\nDo not change the output name, please."]}),"\n",(0,n.jsx)(s.p,{children:"The last thing to do, is filling in the name of your custom processor into the Builders sheet, and give the json file to a Build Coordinator.\nWhen approved, they will put it into the mod, together with your structure."}),"\n",(0,n.jsx)(s.h3,{id:"making-a-theme",children:"Making a theme"}),"\n",(0,n.jsx)(s.p,{children:"Before making a theme, please inform the Build Coordinator, to make sure it can get used and no double themes are made."}),"\n",(0,n.jsx)(s.h4,{id:"excel-way",children:"Excel way"}),"\n",(0,n.jsxs)(s.p,{children:["To start making a theme, use the ",(0,n.jsx)(s.code,{children:"processor_theme_sheet.xlsx"})," sheet.\nTheme making is similar to custom processor making, but require a state for every processor block. This is because builders can use every fixed processor block, with the knowledge it\nwill be processed when generated. The checksum column should be fully green.\nSave this as ",(0,n.jsx)(s.code,{children:"processor_theme_sheet.csv"}),', and run the python script. Enter Room or POI (often you want both, so run twice), and pick the custom choices in the popup. For POIs this is\nonly a chest for now, so press "OK", and you\'re done. For rooms, more options are available. At the top, there are a few toggle options, for if you want mushrooms or not,\nfor example. Below that, under the "Attachments" section, there are more customizable options. A list of example attachments is below in ',(0,n.jsx)(s.a,{href:"#appendix-a",children:"Appendix A"}),'. This can\ngenerate lanterns on the ceiling, rails on the floor, or bee nests on the walls, for example, but more are possible. "Name" is the name of the block you want to attach,\n"Rarity" is how often it occurs (between 0 and 1), "Up" is if it requires to touch the ceiling, "Down" is for when it requires to touch a floor, "Sides" is for how many walls it has to\nbe up against, "Property" is a block property you can give it, and "Value" is the value of that property. Try different rarities and properties to find whatever suits your theme.\nUsing Jade in-game with the advanced settings enabled, you can find the properties in the box. It is currently not possible to adjust the "facing" property to the wall it touches, so\ntorches against the wall do not stick out of the wall, but are rotated.']}),"\n",(0,n.jsx)(s.h4,{id:"worldedit-way",children:"WorldEdit way"}),"\n",(0,n.jsxs)(s.p,{children:["To get started with this, get yourself a theme template (Server: test zone, singleplayer: ",(0,n.jsx)(s.code,{children:"/spawnpiece wotr:guides/theme_palette"}),").\nMake sure that the full processor block is facing north (use F3), and your chosen blocks will be placed to the right of it, as in the first image below.\nFor every processor block type, place blocks next to it in which you want the processor block to be processed into, see second image below.\nDo this for all 8 numbers of processor block families. When finished, for all processor block families, leftclick the main processor block in 1 corner with a wooden axe,\nand rightclick bedrock in the opposing corner with the wooden axe, and type ",(0,n.jsx)(s.code,{children:"/copy"}),". This should copy the entire section for 1 processor\nblock family. Then, type ",(0,n.jsx)(s.code,{children:"/schem share"}),", and click the generated link. Download the file, and rename it to ",(0,n.jsx)(s.code,{children:"processor#.schem"}),", but replace\nthe ",(0,n.jsx)(s.code,{children:"#"})," with the number processor block you've copied. Repeat this for all families, you should have 8 ",(0,n.jsx)(s.code,{children:".schem"})," files."]}),"\n",(0,n.jsx)("img",{src:"builders_theme_north.png",alt:"processor_north",width:"50%"}),"\n",(0,n.jsx)("img",{src:"build_theme_worldedit_PBfill.png",alt:"processor_theme",width:"50%"}),"\n",(0,n.jsxs)(s.p,{children:["Now, download ",(0,n.jsx)(s.a,{href:"https://github.com/Bullzey/schematic_to_json_wotr/blob/main/dist/theme_json_generator.zip",children:"the theme json generator ZIP"})," (right side, little download icon), and extract anywhere. In the ",(0,n.jsx)(s.code,{children:"theme_json_generator"})," folder (which should include an exe\nfile and some folders) create a new folder with name ",(0,n.jsx)(s.code,{children:"theme_#"}),", replacing ",(0,n.jsx)(s.code,{children:"#"})," with the name you want to give your theme,\nand place the 8 ",(0,n.jsx)(s.code,{children:".schem"})," files inside this. The folder ",(0,n.jsx)(s.code,{children:"theme_name"})," is an example, ignore the subfolders. Once finished,\nrun ",(0,n.jsx)(s.code,{children:"theme_json_generator.exe"}),", and select your theme folder. Then, select either ",(0,n.jsx)(s.code,{children:"POI"})," or ",(0,n.jsx)(s.code,{children:"Room"}),", and press ",(0,n.jsx)(s.code,{children:"OK"})," (often you want both, so run twice).\nBoth options should output a ",(0,n.jsx)(s.code,{children:".json"})," file."]}),"\n",(0,n.jsx)(s.h5,{id:"poi",children:"POI"}),"\n",(0,n.jsxs)(s.p,{children:["The noise scale inputs are explained at the start of ",(0,n.jsx)(s.a,{href:"#chapter-4-making-processors",children:"chapter 4"}),", but can often be left as default.\nThe chest checkbox and rarity can also be unchanged, so just press ",(0,n.jsx)(s.code,{children:"OK"}),".\n",(0,n.jsx)(s.em,{children:"More options will come, WIP"})]}),"\n",(0,n.jsx)(s.h5,{id:"room",children:"Room"}),"\n",(0,n.jsxs)(s.p,{children:["The noise scale inputs are explained at the start of ",(0,n.jsx)(s.a,{href:"#chapter-4-making-processors",children:"chapter 4"}),', but can often be left as default.\nThe mushroom and vines checkboxes can be checked, when you want to include them into your theme. The rarity can be tweaked upon preference.\nBelow that, under the "Attachments" section, there are more customizable options. A list of example attachments is below in ',(0,n.jsx)(s.a,{href:"#appendix-a",children:"Appendix A"}),'. This can\ngenerate lanterns on the ceiling, rails on the floor, or bee nests on the walls, for example, but more are possible. "Name" is the name of the block you want to attach,\n"Rarity" is how often it occurs (between 0 and 1), "Up" is if it requires to touch the ceiling, "Down" is for when it requires to touch a floor, "Sides" is for how many walls it has to\nbe up against, "Property" is a block property you can give it, and "Value" is the value of that property. Try different rarities and properties to find whatever suits your theme.\nUsing Jade in-game with the advanced settings enabled, you can find the properties in the box. It is currently not possible to adjust the "facing" property to the wall it touches, so\ntorches against the wall do not stick out of the wall, but are rotated.']}),"\n",(0,n.jsx)(s.h3,{id:"into-the-mod",children:"Into the Mod"}),"\n",(0,n.jsxs)(s.p,{children:["When you have created the required ",(0,n.jsx)(s.code,{children:".json"})," files, send them to a build coordinator, and tell them what name you want it to have, and for\nthemes, discuss the ingredients required for the key generation."]}),"\n",(0,n.jsx)(s.h2,{id:"chapter-5-questions-ask-for-help",children:"Chapter 5: Questions? Ask for help!"}),"\n",(0,n.jsxs)(s.p,{children:["If there is anything that is not clear, or would like to know a bit more about, do not hesitate to ask questions in the ",(0,n.jsx)(s.a,{href:"https://discord.com/channels/1374772629298483202/1377671335295189143",children:"build chat"}),"!\nThere are enough members willing\nto help you out. It is also very possible that more info needs to be given in this tutorial, so don't hold back.",(0,n.jsx)(s.br,{}),"\n","AND SAVE YOUR STRUCTURES!"]}),"\n",(0,n.jsx)(s.h2,{id:"appendix-a",children:"Appendix A"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Description"}),(0,n.jsx)(s.th,{children:"Name"}),(0,n.jsx)(s.th,{children:"Rarity"}),(0,n.jsx)(s.th,{children:"Up"}),(0,n.jsx)(s.th,{children:"Down"}),(0,n.jsx)(s.th,{children:"Sides"}),(0,n.jsx)(s.th,{children:"Property 1"}),(0,n.jsx)(s.th,{children:"Value 1"}),(0,n.jsx)(s.th,{children:"Property 2"}),(0,n.jsx)(s.th,{children:"Value 2"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Lantern on ceiling"}),(0,n.jsxs)(s.td,{children:["minecraft",":lantern"]}),(0,n.jsx)(s.td,{children:"0.01"}),(0,n.jsx)(s.td,{children:"V"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"hanging"}),(0,n.jsx)(s.td,{children:"true"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Rails on the floor"}),(0,n.jsxs)(s.td,{children:["minecraft",":rail"]}),(0,n.jsx)(s.td,{children:"0.02"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"V"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Bee nests on walls"}),(0,n.jsxs)(s.td,{children:["minecraft",":bee_nest"]}),(0,n.jsx)(s.td,{children:"0.01"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"1"}),(0,n.jsx)(s.td,{children:"honey_level"}),(0,n.jsx)(s.td,{children:"5"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Stalactites"}),(0,n.jsxs)(s.td,{children:["minecraft",":pointed_dripstone"]}),(0,n.jsx)(s.td,{children:"0.02"}),(0,n.jsx)(s.td,{children:"V"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"vertical_direction"}),(0,n.jsx)(s.td,{children:"down"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Stalagmites"}),(0,n.jsxs)(s.td,{children:["minecraft",":pointed_dripstone"]}),(0,n.jsx)(s.td,{children:"0.02"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"V"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"vertical_direction"}),(0,n.jsx)(s.td,{children:"up"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Cobweb in corners"}),(0,n.jsxs)(s.td,{children:["minecraft",":cobweb"]}),(0,n.jsx)(s.td,{children:"0.05"}),(0,n.jsx)(s.td,{children:"V"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"1"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Glowberries on ceiling"}),(0,n.jsxs)(s.td,{children:["minecraft",":cave_vines"]}),(0,n.jsx)(s.td,{children:"0.01"}),(0,n.jsx)(s.td,{children:"V"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"berries"}),(0,n.jsx)(s.td,{children:"true"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Waterlogged chain"}),(0,n.jsxs)(s.td,{children:["minecraft",":chain"]}),(0,n.jsx)(s.td,{children:"0.05"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"V"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:"axis"}),(0,n.jsx)(s.td,{children:"y"}),(0,n.jsx)(s.td,{children:"waterlogged"}),(0,n.jsx)(s.td,{children:"true"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Random floating slime"}),(0,n.jsxs)(s.td,{children:["minecraft",":slime_block"]}),(0,n.jsx)(s.td,{children:"0.05"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]})]})]})]})}function c(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>l});var o=t(6540);const n={},r=o.createContext(n);function i(e){const s=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),o.createElement(r.Provider,{value:s},e.children)}}}]);