"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1458],{36:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"code/api/quickmover","title":"QuickMover","description":"QuickMover is a helper for defining the quickMove (shift-click) behavior in menus. It allows declaring the desired","source":"@site/docs/code/api/quickmover.md","sourceDirName":"code/api","slug":"/code/api/quickmover","permalink":"/wotr-docs/docs/code/api/quickmover","draft":false,"unlisted":false,"editUrl":"https://github.com/Wanderers-Of-The-Rift/wotr-docs/edit/main/website/docs/code/api/quickmover.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Configurable HUD","permalink":"/wotr-docs/docs/code/api/configurable-hud"},"next":{"title":"Datapack formats in WotR","permalink":"/wotr-docs/docs/code/datapack/datapack-formats"}}');var i=o(4848),r=o(8453);const s={},a="QuickMover",c={},l=[{value:"Usage",id:"usage",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"quickmover",children:"QuickMover"})}),"\n",(0,i.jsx)(t.p,{children:"QuickMover is a helper for defining the quickMove (shift-click) behavior in menus. It allows declaring the desired\nmovement of items between slots, with standard player inventory behavior built in. The implementation is designed\nto work with both standard container slots and NeoForge's ItemHandler slots."}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(t.p,{children:["Within a Menu, instantiate a QuickMover using its builder (via ",(0,i.jsx)(t.code,{children:"QuickMover::create"}),"). Using the builder the behavior\nof individual slots, ranges of slots and the player inventory slots can be defined by providing the movements that should\nbe attempted when shift-clicking on those slots. The player slots should be defined first if present - this just needs\nto provide the index of the first player slot. Doing so will add the default behavior of switching items between the\nplayer's inventory and their hotbar if there are no other possible moves."]}),"\n",(0,i.jsxs)(t.p,{children:["The implementation of ",(0,i.jsx)(t.code,{children:"AbstractContainerMenu::quickMoveStack"})," should delegate to the ",(0,i.jsx)(t.code,{children:"QuickMover::quickMove"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"private final QuickMover mover;\n\npublic MyMenu(int containerId/*, ... */) {\n    //...\n    mover = QuickMover.create(this)\n            // Specify there are player slots and the slot they begin from.\n            .forPlayerSlots(INPUT_SLOT_COUNT + OUTPUT_SLOT_COUNT)\n            .tryMoveTo(0, INPUT_SLOT_COUNT)\n            // Specify slot 0 will first try to move to slot 1, then to the player's inventory (including hot bar)\n            .forSlot(0)\n            .tryMoveTo(1)\n            .tryMoveToPlayer()\n            // Specify slot 1 will first try to move to slot 1, then to the player's inventory\n            .forSlot(1)\n            .tryMoveTo(0)\n            .tryMoveToPlayer()\n            // Specify that slot 2, through to 2 + OUTPUT_SLOT_COUNT exclusive, will just try to move to player's inventory\n            .forSlots(2, OUTPUT_SLOT_COUNT)\n            .tryMoveToPlayer()\n            .build();            \n}\n\n@Override\npublic @NotNull ItemStack quickMoveStack(@NotNull Player player, int index) {\n    return mover.quickMove(player, index);\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>a});var n=o(6540);const i={},r=n.createContext(i);function s(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);