"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5266],{8453:(e,i,t)=>{t.d(i,{R:()=>s,x:()=>n});var r=t(6540);const o={},d=r.createContext(o);function s(e){const i=r.useContext(d);return r.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function n(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(d.Provider,{value:i},e.children)}},9888:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>n,default:()=>f,frontMatter:()=>s,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"code/design/modifiers","title":"Modifiers","description":"Modifiers are the backbone of every effect that adjusts the characters stats and abilities.","source":"@site/docs/code/design/modifiers.md","sourceDirName":"code/design","slug":"/code/design/modifiers","permalink":"/wotr-docs/docs/code/design/modifiers","draft":false,"unlisted":false,"editUrl":"https://github.com/Wanderers-Of-The-Rift/wotr-docs/edit/main/website/docs/code/design/modifiers.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Gear Sockets","permalink":"/wotr-docs/docs/code/design/gear-socket"},"next":{"title":"Code Style","permalink":"/wotr-docs/docs/code/style/"}}');var o=t(4848),d=t(8453);const s={},n="Modifiers",c={},a=[{value:"AbstractModifier",id:"abstractmodifier",level:2},{value:"Direct Codec",id:"direct-codec",level:3},{value:"Codec",id:"codec",level:3},{value:"Modifier Instance",id:"modifier-instance",level:2},{value:"Modifier Types",id:"modifier-types",level:2},{value:"AttributeModifier",id:"attributemodifier",level:3}];function l(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",...(0,d.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.header,{children:(0,o.jsx)(i.h1,{id:"modifiers",children:"Modifiers"})}),"\n",(0,o.jsx)(i.p,{children:"Modifiers are the backbone of every effect that adjusts the characters stats and abilities."}),"\n",(0,o.jsx)(i.h2,{id:"abstractmodifier",children:"AbstractModifier"}),"\n",(0,o.jsx)(i.p,{children:"The base class for all modifiers."}),"\n",(0,o.jsx)(i.p,{children:"Its primary feature is to provide codec"}),"\n",(0,o.jsx)(i.h3,{id:"direct-codec",children:"Direct Codec"}),"\n",(0,o.jsx)(i.p,{children:"The codec that dispatches to the actual codec based on the type of the modifier. This is done by loading the type from the Modifier Type Registry."}),"\n",(0,o.jsx)(i.h3,{id:"codec",children:"Codec"}),"\n",(0,o.jsx)(i.p,{children:"The codec that is used to serialize and deserialize a reference to a predefined modifier from a datapack."}),"\n",(0,o.jsx)(i.h2,{id:"modifier-instance",children:"Modifier Instance"}),"\n",(0,o.jsx)(i.p,{children:"Contains a reference to a modifier and a roll that determines the actual value of the modifier."}),"\n",(0,o.jsx)(i.h2,{id:"modifier-types",children:"Modifier Types"}),"\n",(0,o.jsx)(i.h3,{id:"attributemodifier",children:"AttributeModifier"}),"\n",(0,o.jsx)(i.p,{children:"Applies a modification to an attribute. Has a minroll and a maxroll, that clamps the value of the roll applied to this modifier."}),"\n",(0,o.jsxs)(i.p,{children:["The actual roll calculation is: ",(0,o.jsx)(i.code,{children:"(roll * (maxroll - minroll)) + minroll"}),"."]})]})}function f(e={}){const{wrapper:i}={...(0,d.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);